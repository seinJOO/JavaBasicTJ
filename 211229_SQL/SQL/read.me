데이터베이스의 목적
1. 데이터의 효율적인 검색과 수정
2. 데이터 중복의 최소화
3. 데이터의 일관성 유지
4. 다수 사용자와의 효율적인 데이터 공유
5. 데이터의 논리적, 물리적 독립성 유지

DBMS : Database Management System - 데이터베이스를 효율적으로 관리하기 위한 시스템
현재는 관계형 데이터베이스 RDB(Relational Database)를 가장 보편적으로 많이 사용함

MySQL, Oracle, MSSql ... -> 우리는 MySQL 사용

MySQL의 장점
- 무료로도 사용 가능
- 안정성과 효율성이 충분히 검증되어 facebook twitter linkedin 등등 많은 회사에서 사용
- java c c++ Perl Python PHP 등 다양한 언어와 함께 사용 가능

2010년 썬(MySQL) -> Oracle이 썬을 인수하면서 MySQL도 함께 Oracle로 인수됨 -> 
Oracle은 이미 Oracle Database 소유 -> 많은 개발자들이 MariaDB라는 MySQL의 무료공개판을 배포함


SQL Structed Query Language
관계형 데이터베이스에서 데이터를 검색/수정/삽입/삭제/갱신하기 위한 데이터베이스 언어
관용적으로 SQL구문은 대문자를 사용함(소문자도 사용 가능하지만, 보기 편하게..?)

<SQL 언어 종류 세 가지>
DDL Data Definition Language
데이터 정의 언어	CREATE(생성) DROP(삭제?) ALTER(갱신)

DML Data Manipulation Language
데이터 조작 언어	INSERT DELETE UPDATE SELECT

DCL Data Control Language
데이터 제어 언어	GRANT, REVOKE, COMMIT(실행명령어) ...


관계형 데이터베이스 - 관계형 데이터베이스에서는 테이블 형태로 정보를 저장하고 관리한다
			      테이블은 레코드 Record 속성 attribute으로 이루어진 2차원 배열의 형태를 가진다.
			      레코드 = 각 행(row) , 속성 = 각 열(column)에 대응함.
			      일반적으로 하나의 응용 프로그램은 여러 개의 테이블을 필요로 함
			      하나의 응용 서비스 구현에 필요한 테이블들을 여러 개 묶어서 사용함 -> 하나의 응용 서비스에는 여러 데이터베이스가 사용됨
			      
JDBC (java database connectivity) - Java가 데이터베이스에 쉽게 접근하도록 도와줌
JDBC를 이용하면 DBMS의 종류(oracle, mariaDB, mysql, mssql)에 관계없이 동일한 접근 방법을 제공받을 수 있다

	*. 자바와 데이터베이스 연결 -> mysql-connector-java-8.0.27를 WEB-INF\lib에 넣어주면 됨!
		1) JDBC 드라이버 로딩
		2) DB 접속을 위한 Connection 객체 생성
		3) SQL 명령문을 전달하기 위한 Statement 객체 생성
		4) Statement객체를 이용하여 쿼리 실행
		5) DB로부터 전송된 쿼리 실행 결과 처리
		6) 사용된 객체 닫기





