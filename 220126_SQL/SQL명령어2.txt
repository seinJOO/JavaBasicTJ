## update 실습 예제

    Syntex(문법)
       UPDATE table_name SET column1=value1, column2=value2, ....
       WHERE condition 

     **WHERE은 조건문으로 특정 조건을 부여하면 해당 조건에 매칭된 결과만 UPDATE처리함. 

   예시) Order테이블에 있는 id가 3인 레코드의 PersonID를 10으로 변경

MariaDB [testdb]> select * from orders where id=3;
+----+-------------+----------+---------------------+
| ID | OrderNumber | PersonID | OrderDate           |
+----+-------------+----------+---------------------+
|  3 |           3 |        3 | 2022-01-26 12:21:00 |
+----+-------------+----------+---------------------+
1 row in set (0.000 sec)

MariaDB [testdb]> update Orders set PersonID=10 where id=3;
Query OK, 1 row affected (0.001 sec)
Rows matched: 1  Changed: 1  Warnings: 0

MariaDB [testdb]> select * from orders where id=3;
+----+-------------+----------+---------------------+
| ID | OrderNumber | PersonID | OrderDate           |
+----+-------------+----------+---------------------+
|  3 |           3 |       10 | 2022-01-26 12:21:00 |
+----+-------------+----------+---------------------+
1 row in set (0.000 sec)

 	(UPDATE 연습)
     	Orders 테이블에 있는 id가 1,3,5는 PersonID를 4로 변경
	Orders 테이블에 있는 id가 2는 PersonID를 5로 변경
        	Orders 테이블에 있는 id가 4는 PersonID를 1로 변경
	Orders 테이블에 있는 id가 8,9는 PersonID를 7로 변경
	Orders 테이블에 있는 id가 6는 PersonID를 6로 변경
	Orders 테이블에 있는 id가 7는 PersonID를 1로 변경
	Orders 테이블에 있는 id가 10는 PersonID를 10로 변경

MariaDB [testdb]> select * from Orders;
+----+-------------+----------+---------------------+
| ID | OrderNumber | PersonID | OrderDate           |
+----+-------------+----------+---------------------+
|  1 |           1 |        4 | 2022-01-26 12:20:51 |
|  2 |           2 |        5 | 2022-01-26 12:20:56 |
|  3 |           3 |        4 | 2022-01-26 12:21:00 |
|  4 |           4 |        1 | 2022-01-26 12:21:05 |
|  5 |           5 |        4 | 2022-01-26 12:21:12 |
|  6 |           6 |        6 | 2022-01-26 12:21:17 |
|  7 |           7 |        1 | 2022-01-26 12:21:54 |
|  8 |           8 |        7 | 2022-01-26 12:22:08 |
|  9 |           9 |        7 | 2022-01-26 12:22:18 |
| 10 |          10 |       10 | 2022-01-26 12:22:23 |
+----+-------------+----------+---------------------+


-SELECT : 테이블 내에 데이터를 검색(*****)

    Syntex(문법)
     SELECT column1, column2, ... FROM table_name;
     => 테이블 내에 있는 정보를 출력(column들의 정보를 출력)

     SELECT column1, column2, ... FROM table_name
     WHERE condition;
     => where이후에 있는 조건에 따라서 컬럼의 값을 출력함. 


>>>>>>>>>>>>>> WHERE 조건문 동작

	Operator(동작)	Description(설명)
=================================================
	=		Equal(같은 경우)
	<>		Not equal(같지 않은 경우). 다른 표현방법 '!='
	>		Greater than(초과인 경우)
	<		Less than(미만인 경우)
	>=		Greater than or equal (이상인 경우)
	<=		Less than or equal(이하인 경우)
	BETWEEN		Between an inclusive range(제시하는 값 사이)
	LIKE		Search for a pattern(특정 패턴값을 찾을 때에)

     예제) Persons테이블에 있는 사람들 중에 나이가 30살 이상인 사람만 출력.
MariaDB [testdb]> select * from Persons where age >= 30;
+----+----------+-----------+------+-------+
| ID | LastName | FirstName | Age  | City  |
+----+----------+-----------+------+-------+
|  8 | user8    | user8     |   30 | Seoul |
| 10 | user10   | user10    |   44 | Seoul |
+----+----------+-----------+------+-------+
2 rows in set (0.000 sec)

       실습) Persons 테이블에 있는 자료를 보고 다음의 쿼리를 확인
	1) 나이가 27인 사람이 사는 도시는? 

	2) id가 5 미만인 사람들을 출력하세요.

	3) 나이가 30대인 사람들의 이름(firstname)을 출력하세요.

>>>>>>>>>>>>>> WHERE 조건문에 비교 연산자 사용(and(논리곱), or(논리합), not(부정))

     - AND연산자 사용 ( A and B 인경우로 A도 참이고, B도 참이면 참... 이외는 거짓)
       예제1) select * from Persons where Age>20 and age<40;

     - OR연산자 사용 ( A or B 인 경우, A또는 B가 참이면 참, 둘다 거짓인 경우에 거짓)
       예제2) select * from Persons where Age<21 or age>40; 

     - NOT 연산자 ( 조건에 대한 부정을 의미함. NOT A의 의미는 A가 아닌 )
       예제3) select * from Persons where not City='Daegu';


	(실습) Persons 테이블에 id가 5, 7인 사람은 City를 Suwon으로 
	id가 8, 1인 사람은 Busan으로 id가 10인사람은 Gwangju로 변경한 후에
	다음 조건을 검색해 보세요.(update사용해서 수정)   

	1) 부산과 수원에 사는 사람들 중에 나이가 30이상인 사람의 이름


	2) 나이가 20이상인 사람들 중에 도시가 광주인 사람과 대구인 사람의 나이는? 


	3) 도시가 서울이 아닌 사람들 중에 부산사람들을 뺀 나머지는? 

>>>>>>>Order by(결과에 대한 정렬)
     사용예
      SELECT column1, column2, column3,....  FROM table_name
      ORDER BY column1,column2,.... ASC(오름차순 정렬) | DESC(내림차순 정렬)   
    
     예제) select ID, City from Persons의 결과를 오름차순 정렬과 내림차순 정렬로 출력해보자!!!

     -오름차순
MariaDB [testdb]> select ID,City from Persons order by City asc;
+----+---------+
| ID | City    |
+----+---------+
|  6 |         |
|  4 | Bundang |
|  1 | Busan   |
|  8 | Busan   |
| 10 | Gwangju |
|  2 | Seoul   |
|  9 | Seoul   |
|  3 | Suwon   |
|  5 | Suwon   |
|  7 | Suwon   |
+----+---------+

     -내림차순
MariaDB [testdb]> select ID,City from Persons order by City desc;
+----+---------+
| ID | City    |
+----+---------+
|  3 | Suwon   |
|  5 | Suwon   |
|  7 | Suwon   |
|  2 | Seoul   |
|  9 | Seoul   |
| 10 | Gwangju |
|  1 | Busan   |
|  8 | Busan   |
|  4 | Bundang |
|  6 |         |
+----+---------+

     (연습) Orders 테이블을  PersonID를 사용하여 오름 차순, 내림 차순 정렬해서 결과를 확인하세요!!!
      select * from Orders order by PersonID asc;
      select * from Orders order by PersonID desc;      

   ***null값의 사용
   : null값이 존재하는 경우 해당 값을 가지고 있는 레코드를 출력하고 싶은 경우... 

    null 값을 생성... 
    insert into Persons (LastName, Age, City) values ('test_null', 35, 'Seoul');

      null값을 가지고 있는 레코드를 출력하고자 할 경우, null을 지정할 방법이 기존방법으로 안됨.
      이때에 is null을 사용하면 원하는 값을 출력할 수 있다.

      null포함하는 레코드 출력 예제)
       select * from Persons where FirstName is null;  

      null값을 포함하지 않는 레코드 출력 예제)
       select * from Persons where FirstName is not null;  


////////////////////////////////////////////////////////////
     *** Transaction ***
      : 데이터를 처리하는 SQL쿼리들을 즉각적으로 반영하지 않고, 내용을 저장하다가 일괄적으로 적용하는 영역 동작을 의미함. 

       Transaction 시작은 "start transaction" 또는 "begin","begin work"로 시작함.
      동작 내용을 적용할 경우는 "commit"를 실행. 
      작업한 내용을 최초의 transaction으로 이동할 경우에는 "rollback"을 실행. 
      주의)*** 한번 사용된 transaction은 다시 시작해야함. 
          즉, commit 이나 rollback이 사용된 경우에는 다시 transaction을 시작해야함.

      mysql에서 transaction이 적용되는 경우의 엔진을 사용해야 됨. 해당 엔진은 InnoDB임.
      table을 해당 엔진으로 설정하는 방법

        -설정  
       ALTER table table_name engine=InnoDB;

   =====Transaction 실습  ==============
       1) Transaction시작 후에 사용자 추가 설정(Persons테이블)
          testuser1 ~ 5까지 추가 후.... (나이와 도시 설정)
          (적용설정하세요...)


       2) Transaction시작 후 다음 내용을 수정
          testuser1, testuser3의 나이을 28살로 변경
          testuser4 사는 곳을 JEJU 로 변경
          (Rollback으로 되돌리기)


   -DELETE : 테이블 내에 데이터를 삭제
     
     Syntex(문법)
      DELETE FROM table_name WHERE condition;

    -Transaction실행(start transaction)- 후에 삭제
     start transaction
 
     -delete-
     delete from Persons where id=11;

===================================
       <<집단 함수>>
	MAX()	: 최대값 구하는 함수
	MIN()	: 최소값 구하는 함수
	COUNT()	: 매칭조건의 갯수를 구하는 함수
	AVG()	: 평균을 구하는 함수
	SUM()	: 합을 구하는 함수

    ex)
     SELECT MAX(column_name) FROM table_name WHERE condition;

    -MAX() 예제 : Persons테이블에 있는 사람들 중에 가장 나이가 많은 사람의 이름
    => select LastName, FirstName from Persons 
      where Age=(select max(age) from Persons);

    -MIN() 예제 : Persons테이블에 있는 사람들 중에 나이가 가장 적은 사람이 사는 도시
    => select Ctiy from Persons 
      where Age=(select min(age) from Persons);

    -COUNT() 예제 : 나이를 기준으로 카운트하세요... 
    => select count(Age) from Person
   참고, count()는  NULL값을 카운트하지 않아요!!!!

    테이블 내에 전체 레코드의 갯수 : select count(*) from Persons;

   -AVG() 예제 : Persons테이블 안에 있는 사람들의 나이의 평균
    => select avg(Age) from Persons;

   -SUM() 예제 : Persons테이블에서 Seoul에 사는 사람들의 나이의 합
    => select sum(Age) from Persons where City='Seoul';

>>>>>>>>>>>>>> WHERE 조건문에 특정 패턴의 값을 사용하는 방법(Like)

	**Like는 where조건에서 특정 패턴을 가진 값을 컬럼에서 찾아내는데 사용함. 
	 -"%" 는 0에서 부터 1또는 이상의 문자가 있는 경우를 의미함.(정규표현식의 "*"와 비슷함)
	 -"_" 는 1개의 문자가 있음을 의미함.(정규표현식에 "."와 비슷함)

	   LIKE Operater		   	Description
	WHERE column LIKE 'a%'		"a"로 시작하는 값을 찾음.
	WHERE column LIKE '%a'		"a"로 끝나는 값을 찾음.
	WHERE column LIKE '%or%'		처음과 끝 어디든 "or"인 값을 찾음.
	WHERE column LIKE '_r%'		두번째 문자가 "r"인 값을 찾음.
	WHERE column LIKE 'a_%_%'		처음 "a"로 시작하는 3개 글자 이상의 값을 검색.
	WHERE column LIKE 'a%o'		"a"로 시작해서 "o"로 끝나는 값을 찾음.


    (연습) Persons테이블에 insert를 이용하여 lastname은 '홍(Hong)', firstname은 '길동(Gildong)'
        나이는 100, 도시는 Island로 계정 생성!!!
        사는 도시 "I(대문자 i)"로 시작하는 사람의 이름을 출력해주세요!!

MariaDB [testdb]> select LastName,FirstName from Persons where City like 'I%';

	실습1) Persons에 있는 레코드 중에 city가 'n' 으로 끝나는 사람들의 나이를 구하세요.

	실습2) lastname에 'test'로 시작하는 사람들의 firstname을 출력하세요.

	실습3) 나이가 34이하이면서 city가 'D'로 시작하는 사람들의 이름(firstname)을 출력하세요	 
	실습4) 도시의 이름이 'G'와 'S'로 시작하는 사람들의 이름을 출력하세요. 
               단, null값을 빼고 출력하세요. 

        	실습5) lastname의 'test'문자 다음 한글자만 있는 사람들을 출력하세요.
>>>>>>>>>>>>>> **IN 다수의 값을 조건으로 사용할 수 있게하는 명령어

      Syntax(문법)
   	SELECT column_name(s).. FROM table_name
	WHERE column_name IN (value1,value2,....);

      예제1) Persons테이블에 서울, 부산, 광주 인 사용자를 출력하세요.
         select * from Persons where City IN ('Seoul','Busan','Gwangju');

      예제2) Persons테이블에서 서울, 부산, 광주 가 아닌 사용자를 출력하세요.
	 select * from Persons where City NOT IN ('Seoul','Busan','Gwangju');

	SELECT column_name(s).. FROM table_name
	WHERE column_name IN (SELECT STATEMENT);

      예제) Orders에 있는 PersonID값을 가지고 있는 사용자를 Persons테이블에서 출력하세요.
	 select * from Persons where ID IN (select PersonID from Orders);


      실습1) 서울, 광주에 살고 있는 사람들 중에 Orders 내역을 출력하세요.

      실습2) 서울과 섬(Island)을 제외한 지역에 살고 있는 사람의 주문을 출력하세요.

      실습3) 주문한 사람들이 살고 있는 도시를 출력하세요. 

      실습4) 서울, 광주, 부산에서 주문한 사람들 중 나이가 30이상인 사람이 주문한 내역은?

>>>>>>>>>>>**BETWEEN 동작은 범위내의 값를 제공함

     Syntax(문법)
	SELECT column_name(s) FROM table_name
	WHERE column_name BETWEEN value1 AND value2;
         의미... value1에서부터 value2까지(두 값 사이)

      예제) 나이가 20에서 40사이에 있는 사람의 FirstName을 알아오자!!
 	select FirstName from Persons where Age BETWEEN 20 AND 40;


      실습) 나이가 30이상 100이하인 사람들이 사는 곳은?


>>>>>>>>>>> AS(ALIAS:별칭)
     특정 컬럼을 지정하거나 결과값들 혹은 테이블을 다른 이름으로 지정하기 위해서 사용함. 

      컬럼을 별칭으로 사용하는 경우,
	SELECT column_name AS alias_name FROM table_name;

      예제1) select PersonID as ID, OrderDate as Date from Orders;


      테이블인 경우,
	SELECT column_name(s) FROM table_name AS alias_name;

      예제2) select max(Age) from (select Age from Persons where City='Seoul') as AgeTable;

      실습1) Persons 테이블에 있는 user7이 주문한 주문번호와 주문날짜,주문고객이름(FirstName)이 
         출력되게 하세요.

	(출력결과)
	+---------+---------------------+-----------+
	| OrderID | OrderDate           | firstname |
	+---------+---------------------+-----------+
	|       8 | 2022-01-26 12:22:08 | user7     |
	|       9 | 2022-01-26 12:22:18 | user7     |
	+---------+---------------------+-----------+
	2 rows in set (0.001 sec)

       (결과)
       	SELECT o.ID as OrderID, o.OrderDate, c.FirstName as firstname 
       	FROM Persons AS c, Orders AS o
       	WHERE c.FirstName='user7' AND c.ID=o.PersonID;


   -Union : 두개의 select문의 대한 결과를 합쳐서 출력하는 명령문
     <<조건>>
       1. 두 select문의 column의 개수가 같아야 한다. 
       2. 두 select문의 서로 대응되는 column의 데이터 타입이 같아야 한다. 

     실행시 두 select 검색에 결과를 합쳐서 반환.... 

      Syntax(문법)

	-UNION(distinct기능이 동작됨)
	SELECT column_name(s) FROM table1_name
	UNION SELECT column_name(s) FROM table2_name;

       예제) select ID from Persons UNION select PersonID from Orders;


	-UNION ALL(distinct동작X)
	SELECT column_name(s) FROM table1_name
	UNION ALL SELECT column_name(s) FROM table2_name;

       예제) select ID from Persons UNION ALL select PersonID from Orders;

       실습) Person 테이블에 있는 20대 사용자의 ID와 나이, Orders의 PersonID와 
           주문번호를 같이 출력하세요.

   - GROUP BY / HAVING(group by의 조건문, 단독으로 사용 X)
     : GROUP BY는 출력된 레코드를 그룹으로 묶고 각 그룹에 대한 요약값 계산시 사용함. 
       HAVING은 GROUP BY에서만 사용하는 조건식을 사용할 경우에 쓰는 구문

     Syntax(문법)
	SELECT 집단함수(column_name) FROM table_name
	GROUP BY coloum_name HAVING condition;

      예제1) Persons테이블에 있는 도시별 사는 사람들의 숫자를 구하는 예제
 

      예제2) Persons테이블에 있는 도시별 사는 사람들의 숫자를 구하는 예제를 
              도시별 사람 숫자를 기준으로 정렬


      실습1) Persons테이블에 나이가 20이상인 사람들을 나이로 그룹화하고 그룹별로 인원수 조회
	 내림차순 정렬을 하세요.


    **HAVING 조건문
     : GROUP BY 구문 내용에 따른 조건을 부여할 때 사용하는 구문

 예제3) Persons테이블의 내용을 도시를 기준으로 그룹화하고, 인원을 구하되 3인이상의 결과를 출력해주세요


     실습2) 나이가 20이상인 사람들이 사는 지역도시 별 인원을 구하고, 
	   숫자가 2이상 5미만인 경우출력하세요


   - Join
       조인을 사용하는 이유, 데이터를 여러 테이블로 나누면 저장 공간을 보다 효율적으로 사용할 수 있고, 조작이 간편하며, 확장하기도 편하다. 하지만 데이터가 여러 테이블로 저장되어 있으면 하나의 SELECT문으로 이 데이터를 어떻게 얻을 것인지가 문제가 된다. 이때에 사용하는 것이 바로 JOIN이다. 
       즉, 여러 테이블로 나눠져 있는 데이터를 조합하여 출력하는 것이 바로 JOIN이다.

      1) INNER JOIN
        : 두 테이블을 대상으로 동일성 테스트를 하여 그 결과를 기준으로 조인(교집합)

       예) SELECT FirstName,Age,City,OrderNumber,OrderDate FROM Persons 
          INNER JOIN Orders on Persons.ID=Orders.PersonID;

      2) OUTER JOIN
        : 한 테이블의 행을 다른 테이블의 행과 연결하는 방식

         -LEFT OUTER JOIN : 조인되는 두 테이블 중 왼쪽 테이블의 모든 행이 결과 관계없이 출력하고,
		오른쪽 테이블의 결과를 추가로 출력하는 형식

       예) SELECT FirstName,Age,City,OrderNumber,OrderDate 
          FROM Persons LEFT OUTER JOIN Orders on Persons.ID=Orders.PersonID;

         -RIGHT OUTER JOIN : 조인되는 두 테이블 중 오른쪽 테이블의 모든 행이 연결 여부와 관계없이
                           모두 출력, 왼쪽 테이블의 결과를 추가로 출력하는 형식

       예) SELECT FirstName,Age,City,OrderNumber,OrderDate 
          FROM Persons RIGHT OUTER JOIN Orders on Persons.ID=Orders.PersonID;


  이외의 SQL구문(DCL)

   - GRANT(권한 부여) 사용자 권한 부여. 

     Syntax(문법-형식)
	GRANT all privileges on db_name.table_name to userid@host 
	identified by 'password';

         all : 허용할 권한을 부여하는 곳
         db_name.table_name : 데이터베이스와 권한을 부여할 테이블 명을 지정
           ex) testDB.Persons
         userid@host : userid는 사용자를 host는 DB에 접속할 접속장비를 의미함.
  	 password : 각 계정에 사용할 패스워드를 입력

       예1) 로컬에서 모든 DB 및 테이블에 접근 권한 설정
	GRANT all privileges on *.* to userid@host 
	identified by 'password';
        
        >> GRANT all privileges on *.* to root@localhost identified by 'P@ssw0rd';
         -> DBMS 내에 있는 모든 DB와 테이블에 로컬 장비에서 root는 모두 허용.(패스워드는 P@ssw0rd)

       예2) 모든 DB 및 테이블에 대해 사용자에게 권한을 주고 리모트에서 접속 가능하게 설정
	GRANT all privileges on *.* to userid@'%' 
	identified by 'password';
       
	>> GRANT all privileges on *.* to test@'%' identified by 'P@ssw0rd';
         -> DBMS 내에 있는 모든 DB와 테이블에 대해서 로컬 및 리모트(원격)으로 test유저의 모두 허용
	    (패스워드는 P@ssw0rd)

       예3) 'testDB'에 대한 DB접근 및 Persons테이블에 접근 권한 설정
	GRANT all privileges on testDB.Persons to userid@'%' 
	identified by 'password';

	>> GRANT all privileges on testDB.Persons to test@localhost identified by 'P@ssw0rd';

     권한 설정 적용
        >> flush privileges;

     권한 삭제
        >> REVOKE all on db_name.table from userid@host ;

     권한 조회
        >> show grants for userid@host ;


(권한 제거 전)
MariaDB [(none)]> show grants for test@'%';  
+--------------------------------------------------------------------------------------------------------------+
| Grants for test@%                                                                                            |
+--------------------------------------------------------------------------------------------------------------+
| GRANT ALL PRIVILEGES ON *.* TO `test`@`%` IDENTIFIED BY PASSWORD '*8232A1298A49F710DBEE0B330C42EEC825D4190A' |
+--------------------------------------------------------------------------------------------------------------+
1 row in set (0.000 sec)

(권한 제거 후)
MariaDB [(none)]> show grants for test@'%';
+-----------------------------------------------------------------------------------------------------+
| Grants for test@%                                                                                   |
+-----------------------------------------------------------------------------------------------------+
| GRANT USAGE ON *.* TO `test`@`%` IDENTIFIED BY PASSWORD '*8232A1298A49F710DBEE0B330C42EEC825D4190A' |
+-----------------------------------------------------------------------------------------------------+
1 row in set (0.000 sec)

  ## mysql 유저 생성
     사용자 계정과 관련된 정보는 mysql 데이터베이스 내에 user 테이블에 저장됨.

    사용자 생성
     -단순 사용자 생성
    >> create user [userid];   => mysql 사용자 생성... 

     -생성시 사용자 패스워드 설정
     (localhost접속 계정)
    >> create user 'userid'@'localhost' identified by 'password';

     (원격 접속 계정)
    >> create user 'userid'@'%' identified by 'password';


    확인
    >> select host,user,password from mysql.user;








