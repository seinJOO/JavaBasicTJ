### JDBC(Java Database Connectivity) 프로그래밍

 JDBC : 자바 프로그램에서 SQL문을 사용하여 데이터를 관리하기 위한 JAVA API
	특징
	- 다양한 데이터베이스에 대해서 별도의 프로그램을 만들 필요가 없다
	- JDBC를 이용하면 하나의 프로그램으로 데이터베이스를 관리할 수 있음

( 홈페이지에서 관련 파라미터값 조회 가능 - https://mariadb.com/kb/en/about-mariadb-connector-j/#connection-strings)

=============== JDBC 실행순서 ===============

	1. Driver Loading : Class.forName("드라이버명");
	2. Connection 생성 : DriverManager.getConnection(url, id, pw);
	3. Statement (쿼리전송객체) 생성 : Statement stmt = conn.createStatement();
	4. SQL 작성 : String sql = "sql구문";
	5. 동작 : ResultSet res = stmt.executeQuery(sql); // stmt.executeUpdate(sql);

=============================================
### Connection 객체
     - 데이터베이스 연결을 위해 사용하는 객체. JDBC를 이용하여 DB와 연동 시 반드시 존재해야 함
     - java.sql 패키지에 있는 Connection 클래스에서 데이터베이스 커넥션을 지원
     - DriverManager클래스에서 제공하는 getConnection() 메서드 사용 -> DriverManager.getConnection()
     - getConnection() 메서드는 파라미터 값으로 JDBC의 URL, DB사용자계정, DB사용자패스워드를 전달해야 함 (반환값:Connection객체)
     - 객체를 생성하지 못한 경우, 발생하는 Error는 SQLException -> 오류 제어를 위해 꼭 예외처리 하기!
     - Connection 객체는 모두 사용한 후에는 close() 메서드를 호출하여 시스템에 반환한다(=종료)

### Statement 객체
     - Connection객체 생성 후에 Connection객체로부터 Statement를 생성하여 쿼리를 실행함
     - Statement객체는 Connection객체의 createStatement() 메서드를 사용하여 생성
     - Statement 객체를 사용하면 쿼리문을 실행할 수 있다
	1) executeQuery(String query) : 반환값을 ResultSet객체에 저장 (SELECT 쿼리문 등)
	2) executeUpdate(String query) : 반환값을 int에 저장 (INSERT, UPDATE, DELETE 쿼리문 실행)

### ResultSet 객체
     - Statement객체의 executeQuery() 메서드에 SELECT 쿼리문에 대한 결과를 저장하는 객체
     - 데이터 조회의 결과값을 읽어올 수 있는 메서드들을 제공하고 있음
     - next()메서드 : 쿼리에 대한 결과값 존재 여부를 확인 가능 & 반복 처리 가능
     - getString(String name) : String - 지정한 컬럼 값을 String으로 읽어옴. 파라미터 변수 name은 DB테이블의 컬럼 이름
     - getInt(String name) : int - 지정한 컬럼 값을 int타입으로 읽어옴
     - getDouble(String name) : double - 지정한 컬럼 값을 double 타입으로 읽어옴








