
## Response 객체의 이해
	- 웹 브라우저의 요청에 응답하는 것
	- 응답 정보를 가지고 있는 객체를 response 객체라고 함
	- Response 객체 관련 매서드가 존재함
	  1) getCharacterEncoding() : 응답할 때의 문자 인코딩 형태를 설정
	  2) addCookie() : 쿠키를 지정함 (쿠키:서버와 클라이언트 간의 정보)
	  3) sendRedirect(URL) : 지정한 URL로 이동

===========================================================

## out 객체의 이해
	- JSP 페이지가 생성하는 모든 내용은 out 기본 객체를 통해 전송됨
	- JSP 페이지 내에 사용하는 비스크립트 요소들(HTML코드와 텍스트)이 out 객체를 통해 전달됨
	- 값을 출력하는 표현식(expression)의 결과값도 out객체에 전달됨.
	  -> 표현식으로 대체하여 사용  (<%= %>)
	<%
	out.print("<h1>안녕!<h1>＂);
	out.print(＂<h2>반가워</h2>");
	%>

===========================================================
 * TCP : 프로토콜(데이터 통신 규약)의 일종, 1:1 통신, 연결이 시작되고 나면 SYN-ACK로 확인 후 연결 종료.
## 쿠키와 세션

### 쿠키 (브라우저가 관리)
	- 웹 브라우저에서 서버로 어떤 데이터를 요청하면, 서버 측에서는 알맞은 로직을 수행한 후에 데이터를 브라우저에게 전달(응답)
	- HTTP 프로토콜은 응답 후에 웹 브라우저와 관계를 종료 (통신 세션 종료 - TCP 세션 종료)
	- 연결이 끊어졌을 때 (TCP세션 종료 시에) 어떤 정보를 지속적으로 유지하기 위한 수단으로 "쿠키"라는 방식을 사용
	- 쿠키는 *서버에서 생성*, 서버가 아닌 *클라이언트 측에 정보를 저장*(저장 위치는 메모리 또는 저장장치(HDD))
	- 서버에서는 요청할 때마다 쿠키의 속성값을 참조. 필요에 따라서 사용. 필요하면 서버측에서 쿠키값을 변경할 수 있음
	- 쿠키는 개당 4KB의 용량으로 제한적으로 사용됨. 최대 300(1.2MB)까지 정보를 가질 수 있음.
	- 쿠키를 통해 사용자임을 인증하고, 특정 위치에 정보를 저장하고, ....

### 세션 : 쿠키와 마찬가지로 인증정보를 유지하기 위해서 사용하는 JSP 내장 객체
	  세션에 저장된 값은 같은 브라우저가 종료되기까지 또는 기본시간(30분) 만료 전까지 어느 페이지에서든 사용이 가능

## 쿠키 vs 세션
	- 쿠키 대신 세션을 사용하는 이유 : 세션이 쿠키보다 보안에서 앞서기 때문 (서버가 세션을 쥐고 있음)
	- 쿠키의 이름이나 데이터는 네트워크를 통해서 전달되기 때문에 HTTP프로토콜을 사용하는 경우 중간에 값을 읽을 수 있음 (MiTM - 중간자공격)
	- 세션을 사용하는 다른 이유는 브라우저가 쿠키를 지원하지 않거나 강제로 사용자가 쿠키를 차단한 경우에도 사용할 수 있음
	- 하지만, 세션은 오직 서버에만 저장되기 때문에 중요한 정보를 저장하기 좋음
	- 세션의 단점 : 여러 서버에서 *공유할 수 없다*
	- 쿠키는 도메인을 이용하여 여러 도메인에서 공유할 수 있다! -> 이런 이유로 대형 포털 사이트들이 쿠키에 로그인 방식을 저장함

### Application 객체
	- 특정 웹 어플리케이션에 포함된 모든 JSP 페이지는 하나의 application 기본 객체를 공유 (프로그램 전체의 영향을 받음)
	- tomcat을 통해 application이 동작함 -> 같은 프로젝트 내에 모든 페이지에서 application라는 동일한 객체를 지님 -> 서버 종료 시까지 사용
	- application 객체는 웹 어플리케이션 전반에 걸쳐 사용되는 정보를 담고 있는 객체(정보를 유지)

[생명주기] : Container에서 정보를 처리할 경우 해당 정보를 유지하는 기간
	- request객체 : 요청한 영역마다 생성되어 해당 페이지에서 끝남
	- session객체 : 브라우저별로 생성되어 브라우저 종료되면 끝남
	- application : 프로그램 전체에서 딱 한번 최초 가동 시 생성







