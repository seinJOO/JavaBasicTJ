클래스 내에 각 멤버클래스를 선언하고 그 동작을 구현해서 클래스 채로 넘김 -> 객체 생성하여 객체 단위로 정보 처리
=> 각 기능을 위해 작업된 클래스를 불러오는 게 자바빈!

## 자바빈(JAVA Bean)
	- JAVA언어의 데이터(변수)와 기능(메서드)으로 이루어진 클래스
	- 데이터를 저장하는 변수 + 데이터를 읽어오는 메서드(getter) + 데이터를 저장하는 데 사용하는 메서드(setter)
	- 데이터베이스와 반복적인 작업을 효율적으로 처리하기 위해 사용
	- JSP에서는 액션태그를 사용하여 자바빈을 사용할 수 있음!

[액션태그에서 자바빈을 사용하는 방법]
 <jsp:useBean id="객체이름" class="실제 해당되는 동작이 저장된 경로" scope="적용범위" />
	- id = 객체이름 : 자바빈에 접근할 때 사용할 이름을 지정
	- class = 실제경로 : 패키지 이름을 포함한 자바빈 클래스의 완전한 경로
	- scope = 적용범위 : 자바빈 객체를 저장할 영역을 지정
			   1) page : 하나의 JSP 페이지를 처리할 때 사용되는 영역
			   2) request : 하나의 요청을 처리할 때 사용하는 영역
			   3) session : 하나의 웹 브라우저와 관련된 영역
			   4) application : 하나의 웹 어플리케이션과 관련된 영역

# JSP 액션태그로 setter와 getter 매서드를 사용할 수 있음 ! (위에서 자바빈 선언 후 사용)
   1) setter 사용법
   <jsp:setProperty property="변수명" name="자바빈id" value="값" />
	property : 값을 저장할 프로퍼티의 이름 (클래스의 변수명) = 객체의 멤버
	name : 값을 저장할 자바빈 객체의 이름 = useBean에서 선언한 id
	value : 프로퍼티의 값을 지정, 표현식이나 EL로 설정할 수 있음

   2) getter 사용법
   <jsp:setProperty property="변수명" name="자바빈id" />
	property : 값을 출력할 프로퍼티의 이름 (클래스의 변수명)
	name : 값을 저장한 자바빈 객체의 이름

<실습 1> - 액션태그를 이용해 bean을 사용
1. 정보(변수)를 처리할 User 클래스 만들기
2. 클래스에 멤버변수명 선언하기
3. 기본생성자 만들기 - User()
4. alt+shift+S 
	constructor : 모든 변수를 초기화하는 생성자 생성
	getter/setter : 사용할 변수명 선택하여 생성
5. jsp에서 useBean / setProperty / getProperty 매서드로 데이터 저장 및 호출하기

<실습 2> - 자바코드를 이용해 bean 사용
0. user 클래스 import -> <%@ page import="com.bean.User" %>
1. User클래스의 객체 생성
2. set__()매서드를 통해 데이터 저장
3. request 객체에 user 객체를 저장 -> request.setAttribute("user", user);
4. forward 해올 경로 지정 -> request.getRequestDispatcher("bean_use_java.jsp").forward(request, response);
5. 해당 경로에 request에 저장된 객체를 받을 User 객체 생성
6. User클래스의 메서드로 데이터 출력

<실습 3> - 액션태그를 이용해 bean 사용
1. User클래스의 useBean 생성 -> <jsp:useBean id="user" class="com.bean.User" scope="request" /> 
2. setProperty + forward 액션태그 지정
3. forward해올 파일에서 usebean 한번 더 생성 (자바빈id 동일하게)
4. getProperty로 데이터 출력


## UML (Unified Modeling Language) : 시스템을 모델로 표현해주는 대표적인 모델링 언어
https://www.microsoft.com/ko-kr/microsoft-365/business-insights-ideas/resources/guide-to-uml-diagramming-and-database-modeling
https://support.microsoft.com/ko-kr/office/visio%ec%9d%98-uml-%eb%8b%a4%ec%9d%b4%ec%96%b4%ea%b7%b8%eb%9e%a8-ca4e3ae9-d413-4c94-8a7a-38dac30cbed6?ui=ko-kr&rs=ko-kr&ad=kr#OfficeVersion=Plan_2_on_desktop,_2019
JAVA객체지향 디자인 패턴 - 블로그 참조 도서 http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&ejkGb=KOR&barcode=9788968480911&orderClick=JAj





## 데이터베이스 (Database)
	- 수많은 데이터들을 관리하기 위한 수단으로 데이터베이스를 활용
	- 데이터베이스는 데이터를 추가, 삭제, 검색, 수정, 이동 등의 기능을 사용
	   (CRUD -> Create, Read, Update, Delete)
	- 데이터베이스를 관리하는 도구 DBMS(DataBase Management System)
	- DBMS는 SQL언어와 데이터베이스를 연결하는 도구
	- RDBMS(관계형 데이터베이스) : DBMS 중 가장 많이 사용 (그 외 네트워크데베, ...)
	- 대표적인 RDBMS는 Oracle, MySQL(MariaDB), MSSQL(Windows 서버용)

## SQL(Structured Query Language)
	- 데이터베이스로부터 데이터를 조회하고 삭제하는 등의 작업을 수행할 때 사용하는 언어
	- 테이블 : RDBMS에서 데이터를 저장하는 장소를 의미함
	- 테이블에는 데이터를 저장하고, 그 구조에 대한 정보를 가지고 있음
		-> 구조와 관련된 정보 : table.schema(스키마) - 내부/외부/개념
	- 테이블에는 각 정보를 저장하는 "컬럼(Column)"이 있고, 각 컬럼의 레코드에 대한 데이터 타입과 길이값을 각각 가지게 됨
	- 레코드(record)는 각 컬럼에 대해서 저장되는 값을 의미함

[SQL문법]
       DDL(Data Definition Language) : 데이터 정의어
	- CREATE : 테이블이나 인덱스, 뷰 등 데이터베이스 객체를 생성
	- DROP : 생성된 데이터베이스 객체를 삭제
	- ALTER : 이미 생성된 데이터베이스 객체를 수정

       DML(Data Manipulation Language) : 데이터 조작어(*)
	- SELECT(*) : 테이블이나 뷰에 있는 데이터를 조회
	- INSERT : 데이터를 신규로 생성
	- UPDATE : 이미 생성되어 있는 데이터를 수정
	- DELETE : 데이터를 삭제

       DCL(Data Control Language) : 데이터 제어어
	- GRANT : 사용자에게 특정 권한을 부여
	- REVOKE : 사용자에게 부여된 권한을 삭제
	- COMMIT : 트랜잭션 처리, 변경된 데이터를 최종 적용
	- ROLLBACK : 트랜잭션 처리, 변경된 데이터를 적용하지 않고 이전으로 되돌리는 기능

=== SQL 쿼리 ===

/* 여러줄 주석 */
# 한 줄 주석

# DATABASE 생성
CREATE DATABASE test;
SHOW DATABASES;	# DATABASE 보는 명령어
USE test;

#테이블 생성
CREATE TABLE members (
	id VARCHAR(20), 
	pw VARCHAR(20),
	NAME VARCHAR(20),
	email VARCHAR(20)
);

DESC members; # 생성된 테이블 정보 출력

# 모든 필드 값을 다 입력하는 방법
INSERT INTO members VALUES ('senny','0910','쭈세','senny@sen.com');
INSERT INTO members VALUES ('senny2','09102','쭈세2','senny2@sen.com');
INSERT INTO members VALUES ('senny3','09103','쭈세3','senny3@sen.com');
INSERT INTO members VALUES ('senny4','09104','쭈세4','senny4@sen.com');

# 일부 필드 값을 입력하여 추가하는 경우
INSERT INTO members (id, pw, name) VALUES ('test','test','테스터');

# 테이블에 있는 값을 읽기 : SELECT
SELECT * FROM members;

# 조건을 사용하여 읽어들이기
SELECT id, pw, name FROM members WHERE id='test';

# 테이블에 있는 레코드의 값을 수정하기 : UPDATE [테이블명] SET [수정할내용] [WHERE 조건]
UPDATE members SET id='update3' WHERE email='senny3@sen.com';
UPDATE members SET email='test@naver.com' WHERE email IS NULL;

# 테이블에 있는 record 삭제하기 : DELETE FROM 테이블 [WHERE 조건] -> WHERE이 없으면 테이블 전체 삭제
DELETE FROM members WHERE id='update3';

# 테이블에 있는 record 삭제하기 (빈 테이블을 만들어서 삭제)
DELETE FROM members;
