package Java20211229;

public class RegularLanguage {

	public static void main(String[] args) {
/*
	정규표현식 : 특정한 규칙을 가진 문자열의 집합을 표현하는데 사용
		기본적인 정규식
			^[0-9]*$ : 숫자
			^[a-zA-Z]*$ : 영문자. 패턴변경자를 써서 /^[a-z]*$/i 같이 쓸 수 있다.
			^[가-힣]*$ : 현대 한글(유니코드를 지원하는 정규식 엔진에 한정)
			^[ㄱ-ㅎㅏ-ㅣ가-힣]*$ : 한글 자모 낱자를 포함한 모든 현대 한글
			굳이 유니코드 환경에서도 KS X 1001 완성형의 현대 한글 2350자만 선택하고 싶다면 완성형/한글 목록/KS X 1001 문서의 끝부분을 참고할 것.
			^[a-zA-Z0-9]*$ : 영문/숫자
			
		메타문자
			^ : 문자열의 시작
			$ : 문자열의 종료. 옵션에 따라 문장의 끝 또는 문서의 끝에 매치된다.
			. : 임의의 한 문자
			[]: 문자 클래스. 문자 클래스 안에 들어가 있는 문자는 그 바깥에서 하나의 문자로 취급된다.
			^ : 문자 클래스 내에서 ^는 not
			- : ex) a-z는 a에서 z까지의 문자
			| : or를 나타냄
			? : 앞 문자가 없거나 하나 있음
			+ : 앞 문자가 1개 이상임
			* : 앞 문자가 0개 이상임
			{n,m} : 앞 문자가 n개 이상 m개 이하. {0,1} 은 ?와 같은 의미다.
			{n,} : 앞 문자가 n개 이상. 위의 형태에서 m이 생략된 형태이다. {0,} 이면 *와 같고 {1,} 이면 +와 같은 의미이다.
			{n} : 앞 문자가 정확히 n개. {n,n} 과 같은 의미이다.
			() : 하나의 패턴구분자 안에 서브 패턴을 지정해서 사용할 경우 괄호로 묶어주는 방식을 사용한다.
			\d - 숫자와 매치, [0-9]와 동일한 표현식이다.
			\D - 숫자가 아닌 것과 매치, [^0-9]와 동일한 표현식이다.
			\s - whitespace 문자와 매치, [ \t\n\r\f\v]와 동일한 표현식이다. 맨 앞의 빈 칸은 공백문자(space)를 의미한다.
			\S - whitespace 문자가 아닌 것과 매치, [^ \t\n\r\f\v]와 동일한 표현식이다.
			\w - 문자+숫자(alphanumeric)와 매치, [a-zA-Z0-9_]와 동일한 표현식이다.
			\W - 문자+숫자(alphanumeric)가 아닌 문자와 매치, [^a-zA-Z0-9_]와 동일한 표현식이다.
			문자 이스케이프는 대문자로 적으면 반대를 의미한다.
		
*/
	}

}
